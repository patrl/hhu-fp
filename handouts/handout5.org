#+title: QR recap and argument raising
#+author: Patrick D. Elliott
#+bibliography: ../../bibliography/master.bib
#+setupfile: ./handout-template.org
#+OPTIONS: ':t
#+cite_export: biblatex

* Exercises (from Coppock and Champollion)

** Composing quantifiers in object position

Produce a translation into the simply-typed lambda calculus for the following sentence:

#+name: beth 
#+begin_exe
\ex Beth speaks a European language.
#+end_exe

Here are some translations to help you get started.  

- Beth \(\Rightarrow\) \(\mathbf{Beth} : E\)
- speaks \(\Rightarrow\) \(\mathbf{speaks} : E \to E \to T\)
- European \(\Rightarrow\) \(\lambda P_{ET }\,.\,\lambda x\,.\,\mathbf{european}(x) \wedge P(x) : (E \to T) \to E \to T\)
- language \(\Rightarrow\) \(\mathbf{language} :E \to T\)
- a \(\Rightarrow\) \(\lambda R_{ET}\,.\,\lambda S_{ET}\,.\,\exists x[P(x) \wedge Q(x)] : (E \to T) \to (E \to T) \to T\)
  
Some important facts about quantifier raising.
- Traces are translated into /variables/.
- The moved expression introduces an /abstraction variable/ into the LF, which triggers a special translation rule, /predicate abstraction/.
  
*Predicate abstraction* works as follows:

- \(\gamma \) is a syntax tree whose only two subtrees are \(x\) and \(\beta \), where \(x\) is an abstraction variable.
- \(\beta \) is translated as \(\beta'\), an expression of type \(T\)
- Then translate \(\gamma \) as \(\lambda x\,.\,\beta'\)

Now, the exercise proper:

- Draw synax trees for the sentence ([[beth]]),  both before and after quantifier raising (assume that "a European language" undergoes QR). The syntax tree post-quantifier raising is called the "LF".
- Provide a translation for the sentence into the lambda calculus by compositionally translating each component part, and reducing the result using the reduction rules we've discussed. 
  

** Scope ambiguities

The following sentence is ambiguous:

#+name: ambig
#+begin_exe
\ex Some linguist offended every philosopher.
#+end_exe

- Paraphrase the two different readings.
- Give an LF tree for each of the two readings, and specify the translation into the lambda calculus at every node of your tree. 
  
N.b., we'll assume the following translation for /every/, the rest you should be able to figure out:

- every \(\Rightarrow\) \(\lambda R_{ET}\,.\,\lambda S_{ET}\,.\,\forall x[R(x) \rightarrow S(x)]: (E \to T) \to (E \to T) \to T\)
  
** Fragment

For each of the following sentences, provide a full analysis consisting of:

- Translations for each of the lexical items.
- A syntactic tree (or more than one, if the sentence is ambiguous), where for each node you give:
  * An indication of the semantic type.
  * A full beta-reduced representation of the denotation in the lambda calculus.
  * A note of which composition rule you used.
    
#+name: sentences
#+begin_exe
\ex Every conservative congressman smokes.
\ex No congressman who smokes dislikes Susan.
\ex Susian respects no congressman who smokes.
\ex Susan dislikes every congressman.
\ex Some congressman from every state smokes.
\ex Every congressman respects himself.
#+end_exe

Note you might have to get a little creative with the final two examples.

* Quantifier scope via type-shifting

Using type-shifting rules to compose quantifiers in object position is an idea which goes back to Hendriks (1993). 

He proposes the type-shifting rule of *object raising* (\(\mathbf{Raise}_O\)), defined as follows:

#+name: raise-o
#+begin_exe
\ex \(\mathbf{Raise}_O (\alpha{}_{E \to \sigma T}) := \lambda Q_{ET \to T}\,.\,\lambda x_{\sigma}\,.\,Q(\lambda y_{E}\,.\,\alpha(y)(x)))\)\\
(for any type \(\sigma \))
#+end_exe

Base on its type, how might we use object-raising to analyze the following sentence?

#+name: bjorn 
#+begin_exe
\ex Bjorn loves everybody.
#+end_exe

#+begin_export latex
\begin{exe}
  \ex
  \begin{forest}
    [{\(T\)}
      [{Bjorn: \(E\)}]
      [{\(E \to T\)}
      [{\((ET \to T) \to ET\)}
        [{\(\mathbf{Raise}_{O}: (E \to ET) \to  (ET \to T) \to ET\)}]
        [{loves: \(E \to E \to T\)}]
      ]
        [{everybody: \((E \to T) \to T\)}]
      ]
    ]
  \end{forest}
\end{exe}
#+end_export

#+name: raise-der
#+begin_exe
\ex \(\mathbf{Raise}_O(\mathbf{love}) = \lambda Q\,.\,\lambda x\,.\,Q(\lambda y\,.\,\mathbf{love}(y)(x))\)
\ex \(\mathbf{Raise}_O(\mathbf{love})(\mathbf{everybody}) = \lambda x\,.\,\mathbf{everybody}(\lambda y\,.\,\mathbf{love}(y)(x))\)
\ex \(\mathbf{Raise}_O(\mathbf{love})(\mathbf{everybody})(\mathbf{Bjorn}) = \mathbf{everybody}(\lambda y\,.\,\mathbf{love}(y)(\mathbf{Bjorn}))\)
#+end_exe

What about the following sentence? Which reading do we derive?

#+name: soev
#+begin_exe
\ex Someone loves everybody.
#+end_exe

#+begin_export latex
\begin{exe}
  \ex
  \begin{forest}
    [{\(T\)}
      [{Someone: \((E \to T) \to T\)}]
      [{\(ET\)}
      [{\((ET \to T) \to ET\)}
        [{\(\mathbf{Raise}_{O} : (E \to ET) \to (ET \to T) \to ET\)}]
        [{loves: \(E \to ET\)}]
      ]
        [{everybody: \(ET \to T\)}]
      ]
    ]\end{forest}
\end{exe}
#+end_export

#+name: der2
#+begin_exe
\ex  \(\mathbf{Raise}_O(\mathbf{love}) = \lambda Q\,.\,\lambda x\,.\,Q(\lambda y\,.\,\mathbf{love}(y)(x))\)
\ex \(\mathbf{Raise}_O(\mathbf{love})(\mathbf{everybody}) = \lambda x\,.\,\mathbf{everybody}(\lambda y\,.\,\mathbf{love}(y)(x))\)
\ex \(\mathbf{someone}(\mathbf{Raise}_O(\mathbf{love})(\mathbf{everybody})) = \mathbf{someone}(\lambda x\,.\,\mathbf{everybody}(\lambda y\,.\,\mathbf{love}(y)(x)))\)
#+end_exe

In order to derive the inverse scope we also need an additional type-shifting rule: subject raising. 

#+name: subj-raise
#+begin_exe
\ex \(\mathbf{Raise}_S(\alpha{}_{\sigma \to ET}) = \lambda y_{\sigma }\,.\,Q_{ET \to T}\,.\,Q(\lambda x_{E}\,.\,\alpha(y)(x))\)
#+end_exe

In fact, we'll need both!

#+begin_export latex
\begin{exe}
  \ex
  \begin{forest}
    [{\(T\)}
      [{someone: \(ET \to T\)}]
      [{\(ETT \to T\)}
      [{\(ETT \to ETT \to T\)}
        [{\(\mathbf{Raise}_{O} : (ETT \to ET) \to ETT \to ETT
          \to  T\)}]
        [{\((ET \to T) \to ET\)}
          [{\(\mathbf{Raise}_{S}: (E \to ET) \to (ET \to T) \to ET\)}]
          [{loves: \(E \to ET\)}]
        ]
      ]
        [{everybody: \(ET \to T\)}]
      ]
    ]
  \end{forest}
\end{exe}
#+end_export

#+name: complex-der
#+begin_exe
\ex \(\mathbf{Raise}_S(\mathbf{love}) = \lambda y\,.\,\lambda Q\,.\,Q(\lambda x\,.\,\mathbf{love}(y)(x))\)
\ex \(\mathbf{Raise}_{O}(\mathbf{Raise}_S(\mathbf{love})) = \lambda Q'\,.\,\lambda Q\,.\,Q'(\lambda y\,.\,Q(\lambda x\,.\,\mathbf{love}(y)(x)))\)
\ex \(\mathbf{Raise}_{O}(\mathbf{Raise}_S(\mathbf{love}))(\mathbf{everybody}) = \lambda Q\,.\,\mathbf{everybody}(\lambda y\,.\,Q(\lambda x\,.\,\mathbf{love}(y)(x)))\)
\ex \(\mathbf{Raise}_{O}(\mathbf{Raise}_S(\mathbf{love}))(\mathbf{everybody})(\mathbf{someone}) = \mathbf{everybody}(\lambda y\,.\,\mathbf{someone}(\lambda x\,.\,\mathbf{love}(y)(x)))\)
#+end_exe

