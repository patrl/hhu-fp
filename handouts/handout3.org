#+title: Quantifier raising
#+subtitle: Handout 3
#+author: Patrick D. Elliott
#+bibliography: ../../bibliography/master.bib
#+setupfile: ./handout-template.org
#+OPTIONS: ':t
#+cite_export: biblatex

* Recap

Reading assigned last time:

- /Invitation to Formal Semantics/
  * chapter 6.3-6.4
  * Chapter 7.4.1
    
** Quantificational NPs

Quantifificational NPs are of type \((E \to T) \to T\).

#+name: ev
#+begin_exe
\ex \(\mathbf{everyone} : (E \to T) \to T\)
#+end_exe

Quantifiers can compose with VPs via /functional application/.

#+begin_export latex
\begin{forest}
  [{\(\mathbf{everyone}(\mathbf{left}): T\)}
    [{\(\mathbf{everyone}: (E \to T) \to T\)}]
    [{\(\mathbf{left}: E \to T\)}]
  ]
\end{forest}
#+end_export

They express /higher-order functions/ from functions to truth values.

We can translate freely from functions of type \(\sigma \to T\) to sets of \(\sigma \)s using the following operation:

#+name: set-f
#+begin_exe
\ex \(Set(f) = \set{x | f(x) = \mathbf{true}}\)
#+end_exe

From a set-theoretic perspective, quantifiers express /functions from sets of individuals to truth-values/ - or, to go one step further /sets of sets of individuals/.

*** First order quantifiers

We can elucidate what "first order" quantificational NPs do using propositional logic:

#+name: fo
#+begin_exe
\ex \(\mathbf{everybody} := \lambda P\,.\,\forall x[P(x)]\)
\ex \(\mathbf{somebody} := \lambda P\,.\,\exists x[P(x)]\)
\ex \(\mathbf{nobody} := \lambda P\,.\,\neg\exists x[P(x)]\)
#+end_exe

- *Question:* give a denotation for each of the above quantifiers as a set of sets of individuals.
  
In order to deal with quantificational NPs which are clearly decompositional, we need to give a translation for quantificational /determiners/ such as /every/, /some/ and /no/:

#+name: evSomeNo
#+begin_exe
\ex \(\mathbf{every} := \lambda R\,.\,\lambda P\,.\,\forall x[R(x) \rightarrow P(x)]\)
\ex \(\mathbf{some} := \lambda R\,.\,\lambda P\,.\,\exists  x[R(x) \wedge  P(x)]\)
\ex \(\mathbf{no} := \lambda R\,.\,\lambda P\,.\,\neg \exists  x[R(x) \wedge  P(x)]\)
#+end_exe
 
